syntax = "proto3";

package goldo.nucleo;

import "goldo/common/geometry.proto";
import "goldo/nucleo/hal.proto";
import "goldo/nucleo/odometry.proto";
import "goldo/nucleo/propulsion.proto";
import "goldo/nucleo/robot_simulator.proto";
import "goldo/nucleo/servos.proto";

import "goldo/pb2_options.proto";

message MessageQueueStatistics {
  uint32 min_available_capacity = 1 [(goldo.pb2_options.cpp_type) = UINT32];
  uint32 bytes_pushed = 2 [(goldo.pb2_options.cpp_type) = UINT32];
  uint32 messages_pushed = 3 [(goldo.pb2_options.cpp_type) = UINT32];
}

message UARTCommTaskStatistics {
  uint32 max_cycles = 1 [(goldo.pb2_options.cpp_type) = UINT32];
  MessageQueueStatistics queue_out = 2;
  MessageQueueStatistics queue_out_prio = 3;
}

enum SensorType {
  UNKNOWN= 0;
  NUCLEO = 1;
  FPGA = 2;  
}
  
message SensorConfig {
  SensorType type = 1 [(goldo.pb2_options.cpp_type) = UINT8];
  int32 id = 2 [(goldo.pb2_options.cpp_type) = UINT8];
  string name = 64 [(goldo.pb2_options.cpp_type) = VOID];
}

message NucleoConfig {
  goldo.nucleo.hal.HalConfig hal = 1;
  goldo.nucleo.robot_simulator.RobotSimulatorConfig robot_simulator = 2;
  goldo.nucleo.odometry.OdometryConfig odometry = 3;
  goldo.nucleo.propulsion.PropulsionControllerConfig propulsion = 4;
  goldo.nucleo.propulsion.PropulsionTaskConfig propulsion_task = 5;
  repeated goldo.nucleo.servos.ServoConfig servos = 6;
  repeated SensorConfig sensors = 7;
  repeated string enabled_tasks = 8;
}

message NucleoState {
  bool configured = 1;
  uint32 heartbeat = 2;
}

message ScopeChannelConfig {
  // raw encoding are for enum or integer values.
  // scaled values are encoded as uints with 0 corresponding to min_value and uint_max to max value.
  enum Encoding {
    RAW8 = 0;
    RAW16 = 1;
    RAW32 = 2;
    SCALED8 = 4;
    SCALED16 = 5;
    SCALED32 = 6;
    FLOAT32 = 8;    
  };
  uint32 variable = 1 [(goldo.pb2_options.cpp_type) = UINT16];
  uint32 encoding = 2 [(goldo.pb2_options.cpp_type) = UINT16];
  float min_value = 3;
  float max_value = 4;
}

message ScopeConfig {
  uint32 period = 1 [(goldo.pb2_options.cpp_type) = UINT16];
  repeated ScopeChannelConfig channels = 2 [(goldo.pb2_options.count_type) = UINT16, (goldo.pb2_options.max_count) = 8];
}

message ScopeData {
  uint32 timestamp = 1 [(goldo.pb2_options.cpp_type) = UINT16];
  bytes data = 2;
}

message ScopeChannelValues {
  repeated float float_values = 1;
}

message ScopeValues {
  repeated float timestamps = 1;
  repeated ScopeChannelValues channels = 2;
}

