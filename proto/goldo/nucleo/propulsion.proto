syntax = "proto3";
package goldo.nucleo.propulsion;
import "goldo/common/geometry.proto";
import "goldo/pb2_options.proto";

enum PropulsionControllerState {
  INACTIVE = 0;
  STOPPED = 1;
  FOLLOW_TRAJECTORY = 2;
  ROTATE = 3;
  REPOSITION = 4;
  MANUAL_CONTROL = 5;
  EMERGENCY_STOP = 6;
  ERROR = 7;
}

message Telemetry {
  goldo.common.geometry.Pose pose = 1;
  uint32 left_encoder = 2;
  uint32 right_encoder = 3;
  float left_pwm = 4;
  float right_pwm = 5;
  PropulsionControllerState state = 6;
  uint32 error = 7;
}

message TelemetryEx {
  goldo.common.geometry.Pose target_pose = 1;
  float error_longi = 2;
  float error_lateral = 3;
  float error_yaw = 4;
  float error_speed = 5;
  float error_yaw_rate = 6;
}

message MotorsVelocitySetpoints {
  float left_vel = 1;
  float right_vel = 2;
  float left_current_feedforward = 3;
  float right_current_feedforward = 4;
}

message AccelerationLimits {
  float accel = 1;
  float deccel = 2;
  float angular_accel = 3;
  float angular_deccel = 4;
}

message OdometryConfig {
  float dist_per_count_left = 1;
  float dist_per_count_right = 2;
  float wheel_distance_left = 3;
  float wheel_distance_right = 4;
  float speed_filter_frequency = 5;
  float accel_filter_frequency = 6;
}

message PIDConfig {
  float kp = 1;
  float ki = 2;
  float kd = 3;
  float lim_i = 4;
  float lim_d = 5;
  float d_filter_frequency = 6;
  float out_min = 7;
  float out_max = 8;
}

message PropulsionLowLevelPIDConfig {
  PIDConfig speed = 1;
  PIDConfig longi = 2;
  PIDConfig yaw_rate = 3;
  PIDConfig yaw = 4;
}

message PropulsionLowLevelControllerConfig {
  float wheels_distance = 1;
  float motors_speed_factor = 2;
}

message PropulsionControllerConfig {
  PropulsionLowLevelControllerConfig low_level_config = 1;
  repeated PropulsionLowLevelPIDConfig pid_configs = 2 [(goldo.pb2_options.max_count) = 4, (goldo.pb2_options.fixed_count) = true];
  float lookahead_distance = 3;
  float lookahead_time = 4;
  float static_pwm_limit = 5;
  float cruise_pwm_limit = 6;
  float reposition_pwm_limit = 7;
}

message ExecuteTrajectory {
  float speed = 1;
  repeated goldo.common.geometry.Point points = 2;
}

message ExecuteTranslation {
  int32 sequence_number = 1 [(goldo.pb2_options.cpp_type) = UINT16];
  float distance = 2;
  float speed = 3;
}

message ExecuteRotation {
  int32 sequence_number = 1 [(goldo.pb2_options.cpp_type) = UINT16];
  float angle = 2;
  float yaw_rate = 3;
}

message ExecuteMoveTo {
  int32 sequence_number = 1 [(goldo.pb2_options.cpp_type) = UINT16];
  goldo.common.geometry.Point point = 2;
  float speed = 3;  
}

message ExecutePointTo {
  int32 sequence_number = 1 [(goldo.pb2_options.cpp_type) = UINT16];
  goldo.common.geometry.Point point = 2;
  float yaw_rate = 3;  
}

message ExecuteFaceDirection {
  int32 sequence_number = 1 [(goldo.pb2_options.cpp_type) = UINT16];
  float yaw = 2;
  float yaw_rate = 3;
}


